<?xml version="1.0" encoding="utf-8"?>
<testresults>
  <testsuite>
    <timestamp>2017-03-23T21:02:23.9886063-05:00</timestamp>
    <source>CSharp</source>
    <target>PowerShell</target>
    <testcases>
      <testcase>
        <description>Cast operator</description>
        <category>Syntax</category>
        <source>function Method
{
	[int]$myInt = 1
	[long]$myLong = [long]$myInt
}</source>
        <target>void Method()
{
	int myInt = 1;
	long myLong = (long)myInt;
}</target>
      </testcase>
      <testcase>
        <description>Switch statement</description>
        <category>Syntax</category>
        <source>function Method
{
	[int]$i = 0
	[int]$x = 1
	switch ($i)
	{
		2 { $x = 2 }
		3 { $x = 3 }
		default { }
	}
}</source>
        <target>void Method()
{
	int i = 0;
	int x = 1;
	switch (i)
	{
		case 2:
			x = 2;
			break;
		case 3:
			x = 3;
			break;
		default:
			break;
	}
}</target>
      </testcase>
      <testcase>
        <description>Assign a constant to a variable</description>
        <category>Syntax</category>
        <source>function Method
{
	[int]$variable = 1
	[string]$variable2 = "myString"
}</source>
        <target>void Method()
{
	int variable = 1;
	string variable2 = "myString";
}</target>
      </testcase>
      <testcase>
        <description>Static method</description>
        <category>Syntax</category>
        <source>function Method()
{
	[Guid]::New()
}</source>
        <target>void Method()
{
	Guid.New();
}</target>
      </testcase>
      <testcase>
        <description>Access the property of a variable</description>
        <category>Syntax</category>
        <source>function Method
{
	[TimeZoneInfo]$timeZoneInfo = New-Object -TypeName TimeZoneInfo
	[string]$variable = $timeZoneInfo.DisplayName
}</source>
        <target>void Method()
{
	TimeZoneInfo timeZoneInfo = new TimeZoneInfo();
	string variable = timeZoneInfo.DisplayName;
}</target>
      </testcase>
      <testcase>
        <description>Common operators</description>
        <category>Syntax</category>
        <source>function Method
{
	[bool]$eq = 1 -eq 2
	[bool]$notEq = 1 -ne 2
	[bool]$or = 1 -eq 2 -or 2 -eq 1
	[bool]$and = 1 -eq 2 -and 2 -eq 1
	[bool]$gt = 1 -gt 2
	[bool]$lt = 1 -lt 2
	[bool]$ge = 1 -ge 2
	[bool]$le = 1 -le 2
	[int]$plus = 1 + 1
	[int]$minus = 1 - 1
	[int]$bor = 1 -bor 1
}</source>
        <target>void Method()
{
	bool eq = 1 == 2;
	bool notEq = 1 != 2;
	bool or = 1 == 2 || 2 == 1;
	bool and = 1 == 2 &amp;&amp; 2 == 1;
	bool gt = 1 &gt; 2;
	bool lt = 1 &lt; 2;
	bool ge = 1 &gt;= 2;
	bool le = 1 &lt;= 2;
	int plus = 1 + 1;
	int minus = 1 - 1;
	int bor = 1 | 1;
}</target>
      </testcase>
      <testcase>
        <description>Return statement</description>
        <category>Syntax</category>
        <source>function Method
{
	return 1
}</source>
        <target>void Method()
{
	return 1;
}</target>
      </testcase>
      <testcase>
        <description>Access the property of a variable</description>
        <category />
        <source>using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace CodeConverter.Test.Languages.CSharp
{
    public class PropertyAccess
    {
        public void Method()
        {
            var timeZoneInfo = new TimeZoneInfo();
            var variable = timeZoneInfo.DisplayName;
        }
    }
}
</source>
        <target>function Method
{
	$timeZoneInfo = (New-Object -TypeName TimeZoneInfo)
	$variable = $timeZoneInfo.DisplayName
}</target>
      </testcase>
      <testcase>
        <description>Write-Host to Console.WriteLine</description>
        <category>Intent</category>
        <source>function Method
{
	Write-Host -Object "Hello, World!"
	Write-Host "Hello, World!"
}</source>
        <target>void Method()
{
	Console.WriteLine("Hello, World!");
	Console.WriteLine("Hello, World!");
}</target>
      </testcase>
      <testcase>
        <description>Throw statement</description>
        <category>Syntax</category>
        <source>function Method
{
	throw (New-Object -TypeName Exception -ArgumentList "Hey")
}</source>
        <target>void Method()
{
	throw (new Exception("Hey"));
}</target>
      </testcase>
      <testcase>
        <description>Declare a method</description>
        <category>Syntax</category>
        <source>function Method
{
}</source>
        <target>void Method()
{
}</target>
      </testcase>
      <testcase>
        <description>Declare a method with arguments</description>
        <category>Syntax</category>
        <source>function Method
{
	param([string]$argument, [int]$integer)
}</source>
        <target>void Method(String argument, Int32 integer)
{
}</target>
      </testcase>
      <testcase>
        <description>Create an object</description>
        <category>Syntax</category>
        <source>function Method
{
	New-Object -TypeName System.Object
}</source>
        <target>void Method()
{
	new System.Object();
}</target>
      </testcase>
      <testcase>
        <description>Start-Process to Process.Start</description>
        <category>Intent</category>
        <source>function Method
{
	Start-Process -FilePath "notepad.exe" -ArgumentList "myText.txt"
	Start-Process "notepad.exe" -ArgumentList "myText.txt"
}</source>
        <target>void Method()
{
	Process process = new Process();
	ProcessStartInfo startInfo = new ProcessStartInfo();
	startInfo.FileName = "notepad.exe";
	startInfo.Arguments = "myText.txt";
	process.StartInfo = startInfo;
	process.Start();
	;
	Process process = new Process();
	ProcessStartInfo startInfo = new ProcessStartInfo();
	startInfo.FileName = "notepad.exe";
	startInfo.Arguments = "myText.txt";
	process.StartInfo = startInfo;
	process.Start();
	;
}</target>
      </testcase>
      <testcase>
        <description>If, Else If, Else</description>
        <category>Syntax</category>
        <source>function Method
{
	if (1 -eq 2)
	{
		[int]$variable = 1;
	}
	elseif ("xyz" -eq (New-Object -TypeName Object))
	{
		[int]$variable = 2;
	}
	else
	{
		[int]$variable = 3;
	}
}</source>
        <target>void Method()
{
	if (1 == 2)
	{
		int variable = 1;
	}
	else if ("xyz" == (new Object()))
	{
		int variable = 2;
	}
	else
	{
		int variable = 3;
	}
}</target>
      </testcase>
      <testcase>
        <description>Create an object</description>
        <category />
        <source>using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace CodeConverter.Test.Languages.CSharp
{
    public class Class
    {
        public void Method()
        {
            new System.Object();
        }
    }
}
</source>
        <target>function Method
{
	(New-Object -TypeName System.Object)
}</target>
      </testcase>
      <testcase>
        <description>If, Else If, Else</description>
        <category />
        <source>using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace CodeConverter.Test.Languages.CSharp
{
    public class Class
    {
        public void Method()
        {
            if (1 == 2)
            {

            }
            else if ("xyz" == (new Object()))
            {

            }
            else
            {

            }
        }
    }
}
</source>
        <target>function Method
{
	if (1 -eq 2)
	{
	}
	elseif ("xyz" -eq ((New-Object -TypeName Object)))
	{
	}
	else
	{
	}
}</target>
      </testcase>
      <testcase>
        <description>Create an object with arugments</description>
        <category />
        <source>using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace CodeConverter.Test.Languages.CSharp
{
    public class Class
    {
        public void Method()
        {
            new System.Object(myVariable);
        }
    }
}
</source>
        <target>function Method
{
	(New-Object -TypeName System.Object -ArgumentList $myVariable)
}</target>
      </testcase>
      <testcase>
        <description>Assign a constant to a variable</description>
        <category />
        <source>public void Method()
{
    var variable = 1;
	var variable = "1";
}</source>
        <target>function Method
{
	$variable = 1
	$variable = "1"
}</target>
      </testcase>
      <testcase>
        <description>Declare a method with arguments</description>
        <category />
        <source>using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace CodeConverter.Test.Languages.CSharp
{
    public class Class
    {
        public void Method(string argument, int integer)
        {
        }
    }
}
</source>
        <target>function Method
{
	param([string]$argument, [int]$integer)
}</target>
      </testcase>
      <testcase>
        <description>While loop with break</description>
        <category>Loops</category>
        <source>function Method
{
	while($true)
	{
		break
	}
}</source>
        <target>void Method()
{
	while (true)
	{
		break;
	}
}</target>
      </testcase>
      <testcase>
        <description>Cast operator</description>
        <category />
        <source>using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace CodeConverter.Test.Languages.CSharp
{
    public class Class
    {
        public void Method()
        {
            var myInt = 1;
            var myLong = (long)myInt;
        }
    }
}
</source>
        <target>function Method
{
	$myInt = 1
	$myLong = [long]$myInt
}</target>
      </testcase>
      <testcase>
        <description>While loop with break</description>
        <category />
        <source>using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace CodeConverter.Test.Languages.CSharp
{
    public class Class
    {
        public void Method()
        {
            while (true)
            {
                break;
            }
        }
    }
}
</source>
        <target>function Method
{
	while ($true)
	{
		break
	}
}</target>
      </testcase>
      <testcase>
        <description>Return statement</description>
        <category />
        <source>using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace CodeConverter.Test.Languages.CSharp
{
    public class Class
    {
        public int Method()
        {
            return 1;
        }
    }
}
</source>
        <target>function Method
{
	return 1
}</target>
      </testcase>
      <testcase>
        <description>For loop</description>
        <category />
        <source>using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace CodeConverter.Test.Languages.CSharp
{
    public class Class
    {
        public void Method()
        {
            for(int i = 0; i &lt; 100; i++)
            {
                var t = i;
            }
        }
    }
}
</source>
        <target>function Method
{
	for([int]$i = 0; $i -lt 100; $i++)
	{
		$t = $i
	}
}</target>
      </testcase>
      <testcase>
        <description>Out-File to File.WriteAllText</description>
        <category>Intent</category>
        <source>function Method()
{
	Out-File -InputObject "My output test" -FilePath "supersecretfile.txt"
	Out-File "supersecretfile.txt" -InputObject "My output test" -Append
}</source>
        <target>void Method()
{
	File.WriteAllText("supersecretfile.txt","My output test");
	File.AppendAllText("supersecretfile.txt","My output test");
}</target>
      </testcase>
      <testcase>
        <description>Platform invoke signature</description>
        <category />
        <source>[DllImport("advapi32.dll", SetLastError = true)]
public static extern bool AbortSystemShutdown(string lpMachineName);

[DllImport("credui", CharSet = CharSet.Unicode)]
public static extern CredUIReturnCodes CredUIPromptForCredentialsW(ref CREDUI_INFO creditUR,
           string targetName,
           IntPtr reserved1,
           int iError,
           StringBuilder userName,
           int maxUserName,
           StringBuilder password,
           int maxPassword,
           [MarshalAs(UnmanagedType.Bool)] ref bool pfSave,
           CREDUI_FLAGS flags);</source>
        <target>function AbortSystemShutdown
{
	param([string]$lpMachineName)
	Add-Type -TypeDefinition '
		using System;
		using System.Runtime.InteropServices;
		public static class PInvoke {
			[DllImport("advapi32.dll", SetLastError = true)]
			public static extern bool AbortSystemShutdown(string lpMachineName);
		}
	'
	[PInvoke]::AbortSystemShutdown($lpMachineName)
}

function CredUIPromptForCredentialsW
{
	param([ref][CREDUI_INFO]$creditUR, [string]$targetName, [IntPtr]$reserved1, [int]$iError, [StringBuilder]$userName, [int]$maxUserName, [StringBuilder]$password, [int]$maxPassword, [ref][bool]$pfSave, [CREDUI_FLAGS]$flags)
	Add-Type -TypeDefinition '
		using System;
		using System.Runtime.InteropServices;
		public static class PInvoke {
			[DllImport("credui", CharSet = CharSet.Unicode)]
			public static extern CredUIReturnCodes CredUIPromptForCredentialsW(ref CREDUI_INFO creditUR,
			string targetName,
			IntPtr reserved1,
			int iError,
			StringBuilder userName,
			int maxUserName,
			StringBuilder password,
			int maxPassword,
			[MarshalAs(UnmanagedType.Bool)] ref bool pfSave,
			CREDUI_FLAGS flags);
		}
	'
	[PInvoke]::CredUIPromptForCredentialsW([ref]$creditUR, $targetName, $reserved1, $iError, $userName, $maxUserName, $password, $maxPassword, [ref]$pfSave, $flags)
}</target>
      </testcase>
      <testcase>
        <description>For loop</description>
        <category>Loops</category>
        <source>function Method
{
	for([int]$i = 0; $i -lt 100; $i++)
	{
		[int]$t = $i
	}
}</source>
        <target>void Method()
{
	for(int i = 0; i &lt; 100; i++)
	{
		int t = i;
	}
}</target>
      </testcase>
      <testcase>
        <description>Foreach loop</description>
        <category />
        <source>using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace CodeConverter.Test.Languages.CSharp
{
    public class Class
    {
        public void Method(string[] strings)
        {
            foreach(var item in strings)
            {
                var str = item;
                continue;
            }
        }
    }
}
</source>
        <target>function Method
{
	param([string[]]$strings)
	foreach ($item in $strings)
	{
		$str = $item
		continue
	}
}</target>
      </testcase>
      <testcase>
        <description>Indexer property</description>
        <category>Syntax</category>
        <source>function Method
{
	param([string]$str)
	[string]$item = $str[3]
}</source>
        <target>void Method(String str)
{
	string item = str[3];
}</target>
      </testcase>
      <testcase>
        <description>Using statement</description>
        <category />
        <source>using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace CodeConverter.Test.Languages.CSharp
{
    public class Class
    {
        public void Method()
        {
            using (AesManaged aes = new AesManaged())
            {
                aes.Padding = PaddingMode.PKCS7;
                aes.KeySize = 128;
                aes.Key = key;
                aes.IV = IV;
            }
        }

        public void Method2()
        {
            var obj = new object();
            using (obj)
            {
                aes.Padding = PaddingMode.PKCS7;
                aes.KeySize = 128;
                aes.Key = key;
                aes.IV = IV;
            }
        }
    }
}
</source>
        <target>function Method
{
	[AesManaged]$aes = $null
	try
	{
		$aes = (New-Object -TypeName AesManaged)
		$aes.Padding = $PaddingMode.PKCS7
		$aes.KeySize = 128
		$aes.Key = $key
		$aes.IV = $IV
	}
	finally
	{
		$aes.Dispose()
	}
}
function Method2
{
	$obj = (New-Object -TypeName object)
	try
	{
		$aes.Padding = $PaddingMode.PKCS7
		$aes.KeySize = 128
		$aes.Key = $key
		$aes.IV = $IV
	}
	finally
	{
		$obj.Dispose()
	}
}</target>
      </testcase>
      <testcase>
        <description>Foreach loop</description>
        <category>Loops</category>
        <source>function Method
{
	param([string[]]$strings)
	foreach($item in $strings)
	{
		[string]$str = $item
		continue
	}
}</source>
        <target>void Method(String[] strings)
{
	foreach (var item in strings)
	{
		string str = item;
		continue;
	}
}</target>
      </testcase>
      <testcase>
        <description>Common operators</description>
        <category />
        <source>using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace CodeConverter.Test.Languages.CSharp
{
    public class Class
    {
        public void Method()
        {
            var eq = 1 == 2;
            var notEq = 1 != 2;
            var or = 1 == 2 || 2 == 1;
            var and = 1 == 2 &amp;&amp; 2 == 1;
            var gt = 1 &gt; 2;
            var lt = 1 &lt; 2;
            var ge = 1 &gt;= 2;
            var le = 1 &lt;= 2;
            var plus = 1 + 1;
            var minus = 1 - 1;
            var bor = 1 | 1;
        }
    }
}
</source>
        <target>function Method
{
	$eq = 1 -eq 2
	$notEq = 1 -ne 2
	$or = 1 -eq 2 -or 2 -eq 1
	$and = 1 -eq 2 -and 2 -eq 1
	$gt = 1 -gt 2
	$lt = 1 -lt 2
	$ge = 1 -ge 2
	$le = 1 -le 2
	$plus = 1 + 1
	$minus = 1 - 1
	$bor = 1 -bor 1
}</target>
      </testcase>
      <testcase>
        <description>Switch statement</description>
        <category />
        <source>using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace CodeConverter.Test.Languages.CSharp
{
    public class Class
    {
        void Method()
        {
            int i = 0;
            int x = 1;
            switch (i)
            {
                case 2:
                    x = 2;
                    break;
                case 3:
                    x = 3;
                    break;
                default:
                    break;
            }
        }
    }
}
</source>
        <target>function Method
{
	[int]$i = 0
	[int]$x = 1
	switch ($i)
	{
		2 {
			$x = 2
			
		}
		3 {
			$x = 3
			
		}
		default {
			
		}
	}
}</target>
      </testcase>
      <testcase>
        <description>Array creation initializers</description>
        <category />
        <source>using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace CodeConverter.Test.Languages.CSharp
{
    public class Class
    {
        public void Method()
        {
            var arr = new string[] { "my", "strings" };
        }
    }
}
</source>
        <target>function Method
{
	$arr = @("my","strings")
}</target>
      </testcase>
      <testcase>
        <description>Array creation initializers</description>
        <category>Syntax</category>
        <source>function Method
{
	[string[]]$arr = @("my","strings")
}</source>
        <target>void Method()
{
	string[] arr = new [] { "my", "strings" };
}</target>
      </testcase>
      <testcase>
        <description>Try, catch, finally</description>
        <category />
        <source>using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace CodeConverter.Test.Languages.CSharp
{
    public class Class
    {
        public void Method()
        {
            try
            {
                var item = new object();
            }
            catch (Exception ex)
            {
                var item = new object();
            }
            catch
            {
                var item = new object();
            }
            finally
            {
                var item = new object();
            }
        }
    }
}
</source>
        <target>function Method
{
	try
	{
		$item = (New-Object -TypeName object)
	}
	catch [Exception]
	{
		$item = (New-Object -TypeName object)
	}
	catch
	{
		$item = (New-Object -TypeName object)
	}
	finally
	{
		$item = (New-Object -TypeName object)
	}
}</target>
      </testcase>
      <testcase>
        <description>Try, catch, finally</description>
        <category>Syntax</category>
        <source>function Method
{
	try
	{
		$item = New-Object -TypeName object
	}
	catch [Exception]
	{
		$item = New-Object -TypeName object
	}
	catch
	{
		$item = New-Object -TypeName object
	}
	finally
	{
		$item = New-Object -TypeName object
	}
}</source>
        <target>void Method()
{
	try
	{
		item = new object();
	}
	catch (Exception)
	{
		item = new object();
	}
	catch
	{
		item = new object();
	}
	finally
	{
		item = new object();
	}
}</target>
      </testcase>
      <testcase>
        <description>Throw statement</description>
        <category />
        <source>using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace CodeConverter.Test.Languages.CSharp
{
    public class Throw
    {
        public void Method()
        {
            throw new Exception("Hey");
        }
    }
}
</source>
        <target>function Method
{
	throw (New-Object -TypeName Exception -ArgumentList "Hey")
}</target>
      </testcase>
      <testcase>
        <description>Converts an incomplete code block successfully.</description>
        <category />
        <source>listView1.Items.Add(new ListViewItem(new string[]{"1", "content"}));
listView1.Items.Add(new ListViewItem(new string[]{"4", "content2"}));
listView1.Items.Add(new ListViewItem(new string[]{"2", "content3"}));</source>
        <target>function Method
{
	$listView1.Items.Add((New-Object -TypeName ListViewItem -ArgumentList @("1","content")))
	$listView1.Items.Add((New-Object -TypeName ListViewItem -ArgumentList @("4","content2")))
	$listView1.Items.Add((New-Object -TypeName ListViewItem -ArgumentList @("2","content3")))
}</target>
      </testcase>
      <testcase>
        <description>Indexer property</description>
        <category />
        <source>using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace CodeConverter.Test.Languages.CSharp
{
    public class Class
    {
        public void Method(string str)
        {
            var item = str[3];
        }
    }
}
</source>
        <target>function Method
{
	param([string]$str)
	$item = $str[3]
}</target>
      </testcase>
      <testcase>
        <description>Declare a method</description>
        <category />
        <source>namespace CodeConverter.Test.Languages.CSharp
{
    public class Class
    {
        public void Method()
        {
        }
    }
}
</source>
        <target>function Method
{
}</target>
      </testcase>
      <testcase>
        <description>Declare a method outside of a class or namespace</description>
        <category />
        <source>void Method()
{

}</source>
        <target>function Method
{
}</target>
      </testcase>
      <testcase>
        <description>Create an object with arugments</description>
        <category>Syntax</category>
        <source>function Method
{
	New-Object -TypeName System.Object -ArgumentList $myVariable
}</source>
        <target>void Method()
{
	new System.Object(myVariable);
}</target>
      </testcase>
    </testcases>
  </testsuite>
</testresults>